pdf("sample_cluster.pdf")
par(mar = c(5, 5, 5, 3))#图的下，左，上，右到页面的边距
par(mgp = c(1.5, 0.5, 0))
plot(clusters)
dev.off()
rm(list=ls())
load('Data.Rdata')
View(downgenes)
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)#这些上调的基因可以导入clueGO直接进行分析了。
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
View(upgenes)
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$GeneID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$GeneID)
background_DEG <- background_DEG[-index,]
index <- grep('BGI',downgenes$GeneID)#Filter our BGI novel genes.
downgenes <- downgenes[-index,]
entr_up <- as.vector(upgenes$GeneID)#这些上调的基因可以导入clueGO直接进行分析了。
entr_down <- as.vector(downgenes$GeneID)
entr_bg <- as.vector(background_all$GeneID)
write.table(entr_up,"upgene.txt",quote = F,sep = '\n',row.names = F,col.names = F)
write.table(entr_up,"upgene_for_ClueGo.txt",quote = F,sep = '\n',row.names = F,col.names = F)
write.table(entr_down,"downgene_for_ClueGo.txt",quote = F,sep = '\n',row.names = F,col.names = F)
entr_up_down <- c(entr_up,entr_down)
write.table(entr_up_down,"allgene_for_ClueGo.txt",quote = F,sep = '\n',row.names = F,col.names = F)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "3.8")
chooseCRANmirror()
install.packages("installr")
require(installr)或者library("installr")
updateR()
options(repos='http://cran.rstudio.com/')
install.packages("installr")
require(installr)或者library("installr")
updateR()
library("installr")
updateR()
updateR()
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "3.8")
install.packages("BiocManager")
install.packages("BiocManager")
updateR()
library("installr")
updateR()
setInternet2(TRUE)
setInternet2(TRUE)
# Fri Nov 16 15:44:08 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',downgenes$GeneID)#Filter our BGI novel genes.
downgenes <- downgenes[-index,]
index <- grep('BGI',background_all$GeneID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$GeneID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$GeneID)#这些上调的基因可以导入clueGO直接进行分析了。
entr_down <- as.vector(downgenes$GeneID)
entr_bg <- as.vector(background_all$GeneID)
entr_up_down <- c(entr_up,entr_down)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("enrichplot", version = "3.8")
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',
level = 3,keyType = 'ENTREZID',readable = T)
# Fri Nov 16 15:44:08 2018 ------------------------------
rm(list=ls())
# Fri Nov 16 15:44:08 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',downgenes$GeneID)#Filter our BGI novel genes.
downgenes <- downgenes[-index,]
index <- grep('BGI',background_all$GeneID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$GeneID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$GeneID)#这些上调的基因可以导入clueGO直接进行分析了。
entr_down <- as.vector(downgenes$GeneID)
entr_bg <- as.vector(background_all$GeneID)
entr_up_down <- c(entr_up,entr_down)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',
level = 3,keyType = 'ENTREZID',readable = T)
head(ggo)
View(ggo)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',
level = 2,keyType = 'ENTREZID',readable = T)
head(ggo)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',
level = 1,keyType = 'ENTREZID',readable = T)
head(ggo)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'MF',
level = 1,keyType = 'ENTREZID',readable = T)
head(ggo)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'CC',
level = 1,keyType = 'ENTREZID',readable = T)
head(ggo)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'CC',
level = 3,keyType = 'ENTREZID',readable = T)
head(ggo)
ggo <- groupGO(gene = entr_up_down,OrgDb = org.Hs.eg.db,ont = 'CC',
level = 3,keyType = 'ENTREZID',readable = T)
head(ggo)
#GO over-representation test/enrichGO 分析
head(entr_bg)
ego <- enrichGO(gene = entr_up_down,OrgDb = org.Hs.eg.db,keyType = 'ENTREZID',ont = 'BP',
pAdjustMethod = 'BH',pvalueCutoff = 0.05,qvalueCutoff = 0.05,
readable = T,universe = entr_bg)#background genes: use all gene. Don't use DEGs only.
head(ego)
#plot
barplot(ego,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego,showCategory = 20,title=paste0("enrichGo_",'BP'))
emapplot(ego, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
cnetplot(ego, showCategory = 20,title=paste0("enrichGo_",'BP'))
goplot(ego,showCategory =20)
emapplot(ego, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
ego2 <- gofilter(ego,level = 3)#remove specific GO terms or GO level (in case of redundance)
ego2 <- gofilter(ego,level = 2)#remove specific GO terms or GO level (in case of redundance)
ego2 <- gofilter(ego,level = 1)#remove specific GO terms or GO level (in case of redundance)
ego2 <- gofilter(ego,level = 3)#remove specific GO terms or GO level (in case of redundance)
barplot(ego2,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego2,showCategory = 20,title=paste0("enrichGo_",'BP'))
emapplot(ego2, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
cnetplot(ego2, showCategory = 20,title=paste0("enrichGo_",'BP'))
str(ego)
ego@geneSets
str(ego@geneSets)
#get genes in significant pathways
sig_genes_tmp <- ego@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
str(sig_genes_tmp)
View(sig_genes_tmp)
ego <- enrichGO(gene = entr_up_down,OrgDb = org.Hs.eg.db,keyType = 'ENTREZID',ont = 'BP',
pAdjustMethod = 'BH',pvalueCutoff = 0.01,qvalueCutoff = 0.01,
readable = T,universe = entr_bg)#background genes: use all gene. Don't use DEGs only.
head(ego)
nrow(ego)
View(ego)
#plot
barplot(ego,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego,showCategory = 20,title=paste0("enrichGo_",'BP'))
#get genes in significant pathways
sig_genes_tmp <- ego@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
colnames(sig_genes_tmp)
head(sig_genes_tmp)
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
install.packages('magrittr')
library(magrittr)
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
library(stringr)
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
head(ego)
View(sig_genes_tmp)
#plot
pdf('enrichGO.pdf',width = 14,onefile = T)
barplot(ego,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego,showCategory = 20,title=paste0("enrichGo_",'BP'))
emapplot(ego, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
cnetplot(ego, showCategory = 20,title=paste0("enrichGo_",'BP'))
goplot(ego,showCategory =20)
dev.off()
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
dev.off()
dev.off()
pdf('enrichGO.pdf',width = 14,onefile = T)
barplot(ego,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego,showCategory = 20,title=paste0("enrichGo_",'BP'))
emapplot(ego, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
cnetplot(ego, showCategory = 20,title=paste0("enrichGo_",'BP'))
goplot(ego,showCategory =20)
dev.off()
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
write.table(sig_genes,quote = F,sep = '\n',col.names = F,row.names = F)
write.table(sig_genes,'sig_genes_GO.txt',quote = F,sep = '\n',col.names = F,row.names = F)
geneList <- background_all$log2.HN.FK.
geneList <- background_all$log2.HN.FK.
names(geneList) <- as.character(background_all$GeneID)
geneList <- sort(geneList,decreasing = T)
ego3 <- gseGO(geneList     = geneList,
OrgDb        = org.Hs.eg.db,
ont          = "BP",
nPerm        = 1000,
minGSSize    = 10,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = FALSE)
dotplot(ego3,showCategory = 20)
# Sat Nov 17 18:15:24 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',downgenes$GeneID)#Filter our BGI novel genes.
downgenes <- downgenes[-index,]
index <- grep('BGI',background_all$GeneID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$GeneID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$GeneID)#这些上调的基因可以导入clueGO直接进行分析了。
entr_down <- as.vector(downgenes$GeneID)
entr_bg <- as.vector(background_all$GeneID)
entr_up_down <- c(entr_up,entr_down)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview", version = "3.8")
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up_down,
organism     = 'hsa',
pvalueCutoff = 0.01,minGSSize = 10, maxGSSize = 500,
use_internal_data = F)
head(kk)
nrow(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
pdf('Kegg_plot.pdf',width = 14,onefile = T)
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
dotplot(kk,showCategory = 20)
emapplot(kk, showCategory=20,color = "p.adjust",layout = 'kk')
cnetplot(kk, showCategory = 20)
dev.off()
#browseKEGG
name_kk <- kk@result$ID
browseKEGG(kk, name_kk[2])
#get genes in significant pathways
sig_genes_tmp <- kk@result
View(sig_genes_tmp)
nrow(sig_genes_tmp)
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
write.table(sig_genes,'KEGG_sig_genes.txt',sep = '\n',quote = F,
col.names = F,row.names = F)
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(entr_up,entr_down)
names(geneset) <- c('Up','Down')#一定要给list命名，不然后面会报错
View(geneset)
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(compare)
#clusterProfiler出的图，我们可以用ggplot2随意改，比如改颜色
dotplot(compare)+ scale_color_continuous(low='purple', high='green')
#KEGG Gene Set Enrichment Analysis
geneList <- background_all$log2.HN.FK.
names(geneList) <- as.character(background_all$GeneID)
geneList <- sort(geneList,decreasing = T)
kk2 <- gseKEGG(geneList     = geneList,
organism     = 'hsa',
nPerm        = 1000,
minGSSize    = 10,maxGSSize = 500,
pvalueCutoff = 0.05,
verbose      = FALSE,
use_internal_data = F)
kk2 <- setReadable(kk2,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)
dotplot(kk2,showCategory=20)
#use pathview to see gene changes in pathway
name_kk2 <- kk2@result$ID
for (i in 1:20) {
hsa04110 <- pathview(gene.data  = geneList,
pathway.id = name_kk2[i],
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1))
}
load('Data.Rdata')
# Fri Dec 07 19:52:55 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
head(upgenes)
View(upgenes)
##1.制作表达文件gct格式
GSEA_exp_file <- background_all
colnames(GSEA_exp_file)
GSEA_exp_file <- GSEA_exp_file[,c(10,2:9)]
View(GSEA_exp_file)
colnames(GSEA_exp_file)[1] <- 'Symbol'
View(GSEA_exp_file)
index <- grep('BGI',GSEA_exp_file$Symbol)#Filter our BGI novel genes.
GSEA_exp_file <- GSEA_exp_file[-index,]
#按照GSEA格式要求，给GSEA需要的矩阵添加第二列description,虽然会被GSEA忽略，
#但是需要添加这一列。先判断探针注释文件行数和gsea矩阵行数是否相同：
library(tibble)
GSEA_exp_file <- add_column(GSEA_exp_file,DESCRIPTION=rep('NA',nrow(GSEA_exp_file)),
.before = 2)
#手动添加前两行，如下：
#    #1.2     前面的“#”不能省略,这里总是#1.2
#    54675	50    分别为gene number，样本数. Tab-delimited
dim(GSEA_exp_file)#看看有多少个样本（列数-2），多少个基因（行数）
write.table(GSEA_exp_file,'GSEA_expression.gct',row.names = F,col.names = T,
quote = F,sep = '\t')
##2.制作分组文件，cls格式
#格式如下所示：第一行50代表样本数目，2代表分2组，空格间隔，1照抄；
#第二行井号注释说明分组信息，空格间隔；第三行为每个样本对应的组名，空格分隔
#  50 2 1
#  # tumor benign
#  1	1	1	1	1	1	1	1	1	1	1	1	1	1	0	0	1	1	1	1	1	1	1	1	1	1	1	0	1	1	0	1	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0
colnames(GSEA_exp_file)
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$GeneID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',downgenes$GeneID)#Filter our BGI novel genes.
downgenes <- downgenes[-index,]
index <- grep('BGI',background_all$GeneID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$GeneID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$GeneID)#这些上调的基因可以导入clueGO直接进行分析了。
entr_down <- as.vector(downgenes$GeneID)
entr_bg <- as.vector(background_all$GeneID)
entr_up_down <- c(entr_up,entr_down)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
kk <- enrichKEGG(gene         = entr_up_down,
organism     = 'hsa',
pvalueCutoff = 0.01,minGSSize = 10, maxGSSize = 500,
use_internal_data = F)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
#browseKEGG
name_kk <- kk@result$ID
name_kk
kk@result
View(kk)
View(kk@result)
browseKEGG(kk, name_kk[2])
str(name_kk)
for (i in 1:20) {
browseKEGG(kk, name_kk[i])
}
for (i in 1:20) {
browseKEGG(kk, name_kk[i])
}
#get genes in significant pathways
sig_genes_tmp <- kk@result
View(sig_genes_tmp)
nrow(sig_genes_tmp)
#get genes in significant pathways
result <- kk@result
nrow(result)
sig_genes_tmp <- result[result$p.adjust<0.05,]
barplot(kk,drop=T,showCategory = 30,x = "GeneRatio")
sig_genes_tmp <- result[result$p.adjust<0.05,]
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
length(sig_genes)
head(result)
View(result)
result$Description
#or specify pathways that you are interested in:
result$Description
str(result)
result[,1:20]
result[,c(1:20)]
str(result)
result[,1:20]
result[1:20,]
result[1:20,1:3]
#or specify pathways that you are interested in:
result$Description
sig_genes_tmp <- result[,c(2,3,4,8,20)]
sig_genes_tmp <- result[c(2,3,4,8,20),]
sig_genes_tmp
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
length(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
write.table(sig_genes,'KEGG_sig_genes.txt',sep = '\n',quote = F,
col.names = F,row.names = F)
cat(result[c(2,3,4,8,20),])
result[c(2,3,4,8,20),]
save(kk,file = "kegg_result.Rdata")
#get genes in significant pathways or specific pathways
load('kegg_result.Rdata')
save(kk,name_kk,file = "kegg_result.Rdata")
#get genes in significant pathways or specific pathways
load('kegg_result.Rdata')
#get genes in significant pathways or specific pathways
load('kegg_result.Rdata')
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
#browseKEGG
name_kk <- kk@result$ID
for (i in 1:20) {
browseKEGG(kk, name_kk[i])
}
result[c(2,3,4,8,20),]
result <- kk@result
nrow(result)
sig_genes_tmp <- result[result$p.adjust<0.05,]
#or specify pathways that you are interested in:
result$Description
result[c(2,3,4,8,20),]
result$Description
sig_genes_tmp
sig_genes_tmp <- result[c(2,3,4,8,20),]
sig_genes_tmp
sig_genes_tmp$Description
#get genes in significant pathways or specific pathways
load('kegg_result.Rdata')
result <- kk@result
write.table(result,"kegg_pathway.txt",quote = F,row.names = F,col.names = T,sep = '\t')

geneList <- sort(geneList,decreasing = T)
mkk2 <- gseMKEGG(geneList     = geneList,
organism     = 'hsa',
nPerm        = 1000,
minGSSize    = 10,maxGSSize = 500,
pvalueCutoff = 0.05,
verbose      = FALSE)
gseaplot(ego3, geneSetID = "hsa04145")
browseKEGG(kk, name_kk[2])
#use pathview to see gene changes in pathway
name_kk2 <- kk2@result$ID
name_kk2
name_kk2 <- kk2@result$ID
for (i in 1:20) {
hsa04110 <- pathview(gene.data  = geneList,
pathway.id = name_kk2[i],
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1))
}
geneList <- background_all$log2.HN.FK.
names(geneList) <- as.character(background_all$ï..Gene.ID)
geneList <- sort(geneList,decreasing = T)
ego3 <- gseGO(geneList     = geneList,
OrgDb        = org.Hs.eg.db,
ont          = "BP",
nPerm        = 1000,
minGSSize    = 10,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = FALSE)
dotplot(ego3,showCategory = 20)
ego3 <- setReadable(ego3,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)
pdf(file = 'GO_GSEA.pdf',width = 10,onefile = T)
for (i in 1:20) {
tmp <- gseaplot(ego3, geneSetID = ego3@result$ID[i],
title=paste(ego3@result$ID,ego3@result$Description[i],sep = '_'))
print(tmp)
}
dev.off()
dotplot(ego3,showCategory = 20)
#GSEA plot
pdf(file = 'GO_GSEA.pdf',width = 10,onefile = T)
dotplot(ego3,showCategory = 20)
for (i in 1:20) {
tmp <- gseaplot(ego3, geneSetID = ego3@result$ID[i],
title=paste(ego3@result$ID,ego3@result$Description[i],sep = '_'))
print(tmp)
}
dev.off()
pdf(file = 'Kegg_GSEA.pdf',width = 10,onefile = T)
dotplot(kk2,showCategory=20)
for (i in 1:20) {
tmp <- gseaplot(kk2, geneSetID = kk2@result$ID[i],
title=paste(kk2@result$ID,kk2@result$Description[i],sep = '_'))
print(tmp)
}
dev.off()
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,qvalueCutoff = 0.05,
universe = entr_bg)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
kk
kk@result
tmp <- kk@geneSets
View(tmp)
tmp <- kk@result
View(tmp)
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,qvalueCutoff = 0.05)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20)
# Sat Nov 17 18:15:24 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20)
barplot(kk,drop=F,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 2000,use_internal_data = F)
# Sat Nov 17 18:15:24 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 2000,use_internal_data = F)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 1, maxGSSize = 2000,use_internal_data = F)
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 100, maxGSSize = 2000,use_internal_data = F)
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 2000,use_internal_data = F)
barplot(kk,drop=T,showCategory = 20)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 10000,use_internal_data = F)
barplot(kk,drop=T,showCategory = 20)
barplot(kk,drop=T,showCategory = 50)
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
#get genes in significant pathways
sig_genes <- kk@result
View(sig_genes)
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- sig_genes$geneID
sig_genes
str(sig_genes)
class(sig)
class(sig_genes)
unique(sig_genes)
sig_genes<-as.data.frame(sig_genes)
View(sig_genes)
sig_genes <- sig_genes$geneID
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- sig_genes$geneID
strsplit(sig_genes,split = '/')
unique(sig_genes)
strsplit(sig_genes,split = '/')->sig_genes
View(sig_genes)
unique(sig_genes)
sig_genes <- as.character(sig_genes)
unique(sig_genes)
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- sig_genes$geneID
sig_genes
unlist(sig_genes)
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- sig_genes[,8]
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes <- sig_genes[[8]]
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
sig_genes$geneID[1]
sig_genes[1,'geneID']
a <- sig_genes[1,'geneID']
a <- vector()
tmp <- sig_genes[1,'geneID']
a <- c(a,tmp)
sig_genes[1,'geneID'] | as.vector()|c()
a <- vector()
a <- sig_genes[1,'geneID'] %>% c(,a)
library(dplyr)
library(dplyr,quietly = T)
a <- vector()
a <- sig_genes[1,'geneID'] %>% c(,a)
sig_genes[1,'geneID']
str(sig_genes[1,'geneID'])
sig_genes[1,'geneID'] %>% c(,a)
a <- vector('ad')
a <- as.vector('ad')
sig_genes[1,'geneID'] %>% c(,a)
text <- "I love R.\nI'm fascinated by Statisitcs."
cat(text)
strsplit(text,split = " ")
strsplit(text,split = "\\s")
# str_split
library(stringr)
str_split(text,pattern = "\\s")
sig_genes[1,'geneID'] %>% strsplit(split = '/')
a <- vector()
a <- sig_genes[1,'geneID'] %>% strsplit(split = '/')%>%c(a)
View(a)
str((a))
str(a)
str(sig_genes[1,'geneID'])
str(sig_genes[1,'geneID'] %>% strsplit(split = '/'))
library(stringr)
a <- sig_genes[1,'geneID'] %>% str_split(split = '/')%>%c(a)
a <- sig_genes[1,'geneID'] %>% str_split(pattern = '/')%>%c(a)
View(a)
str(a)
unlist(a)
#get genes in significant pathways
sig_genes <- kk@result
sig_genes <- sig_genes[sig_genes$p.adjust<0.05,]
library(stringr)
a <- vector()
as.array(1:9)
as.array(1:nrow(sig_genes))
a<- sig_genes[i,'geneID'] %>% str_split(pattern = '/')
tmp <- sig_genes[1,'geneID'] %>% str_split(pattern = '/') %>% c(a)
tmp <- sig_genes[1,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
a <- vector()
MySplit <- function(i){
tmp <- sig_genes[1,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
a <- c(tmp,a)
return(a)
}
lapply(1:nrow(sig_genes),FUN = MySplit)
lapply(as.array(1:9),FUN = MySplit)
MySplit <- function(i){
tmp <- sig_genes[1,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
a <- c(tmp,a)
return(a)
}
a <- vector()
MySplit <- function(i){
tmp <- sig_genes[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
a <- c(tmp,a)
return(a)
}
lapply(as.array(1:9),FUN = MySplit)
r
library(stringr)
MySplit <- function(i){
library(stringr)
tmp <- sig_genes[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
a <- vector()
for (i in 1:nrow(sig_genes)) {
MySplit(i)
a <- c(a,tmp)
}
a
unique(a)
#get genes in significant pathways
sig_genes_tmp <- kk@result
sig_genes_tmp <- sig_genes[sig_genes$p.adjust<0.05,]
MySplit <- function(i){
library(stringr)
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
MySplit <- function(i){
library(stringr)
library(dplyr)
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
sig_genes <- c(sig_genes,tmp)
sig_genes_tmp <- kk@result
sig_genes_tmp <- sig_genes[sig_genes$p.adjust<0.05,]
MySplit <- function(i){
library(stringr)
library(dplyr)
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
#get genes in significant pathways
sig_genes_tmp <- kk@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
View(sig_genes_tmp)
MySplit <- function(i){
library(stringr)
library(dplyr)
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 500,use_internal_data = F)
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
cat(sig_genes)
cat(sig_genes,sep = '\n')
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',level = 3,keyType = 'ENTREZID',readable = T)
head(ggo)
barplot(ggo,drop=T,x = "GeneRatio",showCategory=20,title='GO_GeneRatio')
#GO over-representation test/enrichGO 分析
head(entr_bg)
ego <- enrichGO(gene = entr_up,OrgDb = org.Hs.eg.db,keyType = 'ENTREZID',ont = 'BP',
pAdjustMethod = 'BH',pvalueCutoff = 0.01,qvalueCutoff = 0.01,
readable = T,universe = entr_bg)#background genes: use all gene. Don't use DEGs only.
#plot
barplot(ego,drop=T,showCategory = 20,title=paste0("enrichGo_",'BP'))
dotplot(ego,showCategory = 20,title=paste0("enrichGo_",'BP'))
emapplot(ego, showCategory=20,color = "p.adjust",layout = 'kk',title=paste0("enrichGo_",'BP'))
cnetplot(ego, showCategory = 20,title=paste0("enrichGo_",'BP'))
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 500,use_internal_data = F)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
dotplot(kk,showCategory = 20)
emapplot(kk, showCategory=20,color = "p.adjust",layout = 'kk')
cnetplot(kk, showCategory = 20)
#get genes in significant pathways
sig_genes_tmp <- ego2@result
#get genes in significant pathways
sig_genes_tmp <- ego@result
# Fri Nov 16 15:44:08 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
#convert gene symbols to ENTREZID ID
#Attention: BGI report includes entrezID. No need to run the following 2 commands. Just filter out
#the BGI_novel genes.
#keytypes(org.Hs.eg.db)
#entr_up <- bitr(upgenes$Other.Gene.ID,fromType = 'SYMBOL',toType = c('ENTREZID','GENENAME'),OrgDb = 'org.Hs.eg.db')
#The ID type (both fromType & toType) should be one of ‘kegg’, ‘ncbi-geneid’, ‘ncbi-proteinid’ or
#‘uniprot’. The ‘kegg’ is the primary ID used in KEGG database. The data source of KEGG was from NCBI.
#A rule of thumb for the ‘kegg’ ID is entrez ID for eukaryote species and Locus ID for prokaryotes.
#keg2np <- bitr_kegg(entr_up$ENTREZID,fromType = 'kegg',toType = 'ncbi-proteinid',organism = 'hsa')
#head(keg2np)
#GO analysis
#GO classification/GoupGO 分析
ggo <- groupGO(gene = entr_up,OrgDb = org.Hs.eg.db,ont = 'BP',level = 3,keyType = 'ENTREZID',readable = T)
head(ggo)
barplot(ggo,drop=T,x = "GeneRatio",showCategory=20,title='GO_GeneRatio')
#GO over-representation test/enrichGO 分析
head(entr_bg)
ego <- enrichGO(gene = entr_up,OrgDb = org.Hs.eg.db,keyType = 'ENTREZID',ont = 'BP',
pAdjustMethod = 'BH',pvalueCutoff = 0.01,qvalueCutoff = 0.01,
readable = T,universe = entr_bg)#background genes: use all gene. Don't use DEGs only.
head(ego)
#get genes in significant pathways
sig_genes_tmp <- ego@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
View(sig_genes_tmp)
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
MySplit(1)
sig_genes_tmp <- ego@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
sig_genes_tmp <- ego@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用

colnames(data)
rownames(data) <- data$Other.Gene.ID
data <- data[,2:11]
data <- round(data)#数据readcount是RSEM定量的结果，并不是常见的htseq-count的结果，
head(data)
#设置分组信息以及构建dds对象
condition<-factor(c(rep("FK",5),rep("HN",5)))
coldata<-data.frame(condition,row.names = colnames(data))
dds<-DESeqDataSetFromMatrix(countData=data, colData=coldata, design=~condition)
#使用DESeq函数进行估计离散度，然后进行标准的差异表达分析，得到res对象结果
dds <- DESeq(dds)
res <- results(dds)
#最后设定阈值，筛选差异基因，导出数据
table(res$padj <0.05)
res <- res[order(res$padj),]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
write.table(resdata,file = "FK_vs_HN_DESeq2.csv",quote = F,sep = "\t",
col.names = T,row.names = F)
test <- read.csv('DEG.csv')
head(test)
colnames(test)
colnames(resdata)
head(resdata)
a <- merge(resdata,test,by.x = 'Row.names', by.y = 'Other.Gene.ID',all=F)
View(a)
b <- as.character(resdata$Row.names)
b
c <- as.character(test$Other.Gene.ID)
setdiff(b,c)
setdiff(c,b)
my_res <- as.character(resdata$Row.names)
BGI_DEG <- read.csv('DEG.csv')
head(BGI_DEG)
tmp <- merge(resdata,test,by.x = 'Row.names', by.y = 'Other.Gene.ID',all=F)
my_res <- as.character(resdata$Row.names)
BGI_res <- as.character(BGI_DEG$Other.Gene.ID)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
head(resdata)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001,]
my_res <- as.character(resdata$Row.names)
BGI_res <- as.character(BGI_DEG$Other.Gene.ID)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
range(BGI_DEG$log2.HN.FK.)
isTRUE(0.5 %in% BGI_DEG$log2.HN.FK.)
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2FoldChange)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.001,]
str(BGI_DEG)
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2FoldChange)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.001,]
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2.HN.FK.)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.001,]
BGI_DEG <- read.csv('DEG.csv')
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2.HN.FK.)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.001,]
head(BGI_DEG)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001,]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
head(resdata)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001,]
my_res <- as.character(resdata$Row.names)
BGI_res <- as.character(BGI_DEG$Other.Gene.ID)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
nrow(BGI_res)
View(tmp)
library(DESeq2)
data <- read.csv('all.csv')
colnames(data)
rownames(data) <- data$Other.Gene.ID
data <- data[,2:11]
data <- round(data)#数据readcount是RSEM定量的结果，并不是常见的htseq-count的结果，
#所以count值会有小数点，而DESeq2包不支持count数有小数点，所以这里需要round取整
#设置分组信息以及构建dds对象
condition<-factor(c(rep("FK",5),rep("HN",5)))
coldata<-data.frame(condition,row.names = colnames(data))
dds<-DESeqDataSetFromMatrix(countData=data, colData=coldata, design=~condition)
#使用DESeq函数进行估计离散度，然后进行标准的差异表达分析，得到res对象结果
dds <- DESeq(dds)
res <- results(dds)
#最后设定阈值，筛选差异基因，导出数据
table(res$padj <0.05)
res <- res[order(res$padj),]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
write.table(resdata,file = "FK_vs_HN_DESeq2.csv",quote = F,sep = "\t",
col.names = T,row.names = F)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001,]
BGI_DEG <- read.csv('DEG.csv')
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2.HN.FK.)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.001,]
head(BGI_DEG)
tmp <- merge(resdata,test,by.x = 'Row.names', by.y = 'Other.Gene.ID',all=F)
my_res <- as.character(resdata$Row.names)
BGI_res <- as.character(BGI_DEG$Other.Gene.ID)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
BGI_DEG <- BGI_DEG[order(BGI_DEG$log2.HN.FK.),]
resdata <- resdata[order(resdata$log2FoldChange),]
head(BGI_DEG)
head(resdata)
View(BGI_DEG)
View(resdata)
View(resdata)
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
View(resdata)
View(resdata)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001,]
View(resdata)
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
resdata <- subset(x = resdata,subset=abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.001)
View(resdata)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.05,]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
resdata <- resdata[abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.05,]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),
by="row.names",sort=FALSE)
resdata <- subset(x = resdata,subset=abs(resdata$log2FoldChange)>=2 & resdata$padj<=0.05)
View(resdata)
BGI_DEG <- read.csv('DEG.csv')
BGI_DEG <- BGI_DEG[abs(BGI_DEG$log2.HN.FK.)>=2 & BGI_DEG$Qvalue.FK.vs.HN.<=0.05,]
my_res <- as.character(resdata$Row.names)
BGI_res <- as.character(BGI_DEG$Other.Gene.ID)
setdiff(my_res,BGI_res)
setdiff(BGI_res,my_res)
BGI_DEG <- BGI_DEG[order(BGI_DEG$log2.HN.FK.),]
resdata <- resdata[order(resdata$log2FoldChange),]
head(BGI_DEG)
head(resdata)
View(BGI_DEG)
View(resdata)
# Mon Nov 26 15:17:43 2018 ------------------------------
rm(ls=list())
# Mon Nov 26 15:17:43 2018 ------------------------------
rm(list=ls())
library(WGCNA)
install.packages('WGCNA')
library(WGCNA)
load('Data.Rdata')
head(background_all)
data <- read.csv('all.csv')
data <- data[,2:11]
library(Hmisc)
res <- rcorr(as.matrix(data))
pheatmap(res$r,
col = colorRampPalette(c("#3399FF","white","red"))(100),
cluster_rows = T,cluster_cols=T,
clustering_distance_rows = 'correlation',clustering_distance_cols = 'correlation',
treeheight_row = 80,treeheight_col = 80,
display_numbers = T,number_color = 'black',fontsize_number = 10,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 10,
fontsize_row = 10,fontsize = 10,
main = 'Correlation')
library(pheatmap)
pheatmap(res$r,
col = colorRampPalette(c("#3399FF","white","red"))(100),
cluster_rows = T,cluster_cols=T,
clustering_distance_rows = 'correlation',clustering_distance_cols = 'correlation',
treeheight_row = 80,treeheight_col = 80,
display_numbers = T,number_color = 'black',fontsize_number = 10,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 10,
fontsize_row = 10,fontsize = 10,
main = 'Correlation')
library(corrplot)
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(res$r,col = colorRampPalette(c("blue","white","red"))(100),
type='full',order='hclust',tl.col = "black",
diag=T,outline = T,bg = 'white',addgrid.col = 'black',
addCoef.col = 'black',tl.cex = 1,
p.mat = res$P,sig.level = 0.01,insig = 'blank',
number.digits = 2)
symnum(res$r)
View(data)
View(data)
View(data)
colnames(data)
#还可以通过层次聚类来查看样本之间的关系：
names_cluster <- data.frame(sample=colnames(data),group=c(rep('FK',5),rep('HN',5)))
names_cluster
str(names_cluster)
#如果group是factor,要转化成character
names_cluster$group <- as.character(names_cluster$group)
str(names_cluster)
#合并出来新名称，这样能同时看到样本名字和分组信息
names_cluster$new_names <- paste(names_cluster$sample,names_cluster$group,sep = "_")
names_cluster
#查看对应关系是否正确，应该是正确的。即使不正确，用t()将列名转成一列就可以修改操作了
names_cluster
colnames(data)
#对矩阵的名字进行替换
colnames(data) <- names_cluster$new_names
colnames(data)
#然后进行聚类
distance <- dist(t(data),method="maximum")
clusters <- hclust(distance,method = "complete")
plot(clusters)
#然后进行聚类
distance <- dist(t(data),method="euclidean")
clusters <- hclust(distance,method = "complete")
plot(clusters)
#然后进行聚类
distance <- dist(t(data),method="euclidean")
clusters <- hclust(distance,method = "complete")
plot(clusters)
pdf("sample_cluster.pdf")
par(mar = c(5, 5, 5, 3))#图的下，左，上，右到页面的边距
par(mgp = c(1.5, 0.5, 0))
plot(clusters)
dev.off()
View(data)
View(data)
# Define nodePar
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
hc=hclust(dist(t(data)))
par(mar=c(5,5,5,10))
png('hclust.png',res=120,height = 1800)
plot(as.dendrogram(hc), nodePar = nodePar, horiz = TRUE)
dev.off()
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
hc=hclust(dist(t(data)))
par(mar=c(5,5,5,10))
pdf('hclust.pdf')
plot(as.dendrogram(hc), nodePar = nodePar, horiz = TRUE)
dev.off()
nodePar
library(clusterProfiler)
data(gcSample)
str(gcSample)
View(gcSample)
gcSample
x <- compareCluster(gcSample, 'enrichDO')
x <- compareCluster(gcSample,fun = 'enrichDO')
x <- compareCluster(gcSample,fun = 'enrichGO')
data(gcSample)
gcSample
str(gcSample)
# Sat Nov 17 18:15:24 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 500,use_internal_data = F)
View(kk)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
library(DOSE)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
barplot(kk,drop=T,showCategory = 20,x = "GeneRatio")
dotplot(kk,showCategory = 20)
emapplot(kk, showCategory=20,color = "p.adjust",layout = 'kk')
dotplot(kk,showCategory = 20)
#get genes in significant pathways
sig_genes_tmp <- kk@result
sig_genes_tmp <- sig_genes_tmp[sig_genes_tmp$p.adjust<0.05,]
MySplit <- function(i){
tmp <- sig_genes_tmp[i,'geneID'] %>% str_split(pattern = '/') %>% unlist(recursive = T)
return(tmp)
}
sig_genes <- vector()
for (i in 1:nrow(sig_genes_tmp)) {
tmp <- MySplit(i)
sig_genes <- c(sig_genes,tmp)
}
sig_genes <- unique(sig_genes)
cat(sig_genes,sep = '\n')#按行打印出来，可以直接复制到stringDB里面做蛋白相互作用
#KEGG Gene Set Enrichment Analysis
geneList <- background_all$log2.HN.FK.
names(geneList) <- as.character(background_all$ï..Gene.ID)
geneList <- sort(geneList,decreasing = T)
str(geneList)
kk@geneSets
str(kk@geneSets)
#比较基因集的生物学功能
compare <- compareCluster(geneClusters = kk@geneSets,fun = 'enrichKEGG')
str(compare)
plot(compare)
Plot(compare)
dotplot(compare)
str(kk@geneSets)
kk@geneSets[1]
kk@geneSets[1:2]
kk@geneSets[[1:2]]
#比较基因集的生物学功能
compare <- compareCluster(geneClusters = kk@geneSets[1:10],fun = 'enrichKEGG')
dotplot(compare)
#比较基因集的生物学功能
compare <- compareCluster(geneClusters = kk@geneSets[1:5],fun = 'enrichKEGG')
dotplot(compare)
#比较基因集的生物学功能
compare <- compareCluster(geneClusters = kk@geneSets[1:5],fun = 'enrichKEGG')
dotplot(compare)
dotplot(compare)+ scale_color_continuous(low='purple', high='green')
library(ggplot2)
dotplot(compare)+ scale_color_continuous(low='purple', high='green')
dotplot(compare)
#clusterProfiler出的图，我们可以随意改啊，比如改颜色
dotplot(compare)+ scale_color_continuous(low='purple', high='green')
View(kk)
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
index <- grep('BGI',background_DEG$ï..Gene.ID)
background_DEG <- background_DEG[-index,]
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
#kegg over-representation test
kk <- enrichKEGG(gene         = entr_up,
organism     = 'hsa',
pvalueCutoff = 0.05,minGSSize = 10, maxGSSize = 500,use_internal_data = F)
head(kk)
kk <- setReadable(kk,keytype = 'ENTREZID',OrgDb = org.Hs.eg.db)#转化ID
#比较基因集的生物学功能，比如比较上下调基因
compare_up <- compareCluster(geneClusters = kk@geneSets[1:5],fun = 'enrichKEGG')
str(kk)
str(kk@result)
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(upgenes,downgenes)
str(geneset)
View(downgenes)
entr_down <- as.vector(downgenes$ï..Gene.ID)
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(entr_up,entr_down)
str(geneset)
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(entr_up,entr_down)
str(geneset)
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(enrichKEGG(entr_down))
dotplot(enrichKEGG(entr_up))
View(geneset)
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(compare)
geneset
index <- grep('BGI',downgenes$ï..Gene.ID)
downgenes <- downgenes[-index,]
entr_down <- as.vector(downgenes$ï..Gene.ID)
geneset
index <- grep('BGI',downgenes$ï..Gene.ID)
downgenes <- downgenes[-index,]
entr_down <- as.vector(downgenes$ï..Gene.ID)
geneset
View(downgenes)
# Sat Nov 17 18:15:24 2018 ------------------------------
rm(list=ls())
load('Data.Rdata')
index <- grep('BGI',downgenes$ï..Gene.ID)
downgenes <- downgenes[-index,]
index <- grep('BGI',upgenes$ï..Gene.ID)#Filter our BGI novel genes.
upgenes <- upgenes[-index,]
index <- grep('BGI',background_all$ï..Gene.ID)
background_all <- background_all[-index,]#filter out BGI_novel genes.
entr_up <- as.vector(upgenes$ï..Gene.ID)
entr_down <- as.vector(downgenes$ï..Gene.ID)
entr_bg <- as.vector(background_all$ï..Gene.ID)
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(pathview)
library(stringr)
library(dplyr)
library(DOSE)
library(ggplot2)
library(pathview)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview", version = "3.8")
library(pathview)
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(entr_up,entr_down)
geneset
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(enrichKEGG(entr_up))
dotplot(enrichKEGG(entr_down))
data(gcSample)
str(gcSample)
compare <- compareCluster(geneClusters = gcSample,fun = 'enrichKEGG')
dotplot(compare)
gcSample
str(gcSample)
str(geneset)
names(geneset)<-c('1','2')
str(geneset)
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
names(geneset) <- c('Up','Down')#一定要给list命名，不然后面会报错
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(compare)
geneList <- background_all$log2.HN.FK.
names(geneList) <- as.character(background_all$ï..Gene.ID)
geneList <- sort(geneList,decreasing = T)
mydf <- data.frame()
mydf <- data.frame(Entrez=names(geneList), FC=geneList)
View(mydf)
mydf <- mydf[abs(mydf$FC) > 1,]
mydf$group <- "upregulated"
mydf$group[mydf$FC < 0] <- "downregulated"
mydf$othergroup <- "A"
mydf$othergroup[abs(mydf$FC) > 2] <- "B"
formula_res <- compareCluster(Entrez~group+othergroup, data=mydf, fun="enrichKEGG")
dotplot(formula_res)
dotplot(formula_res)
dotplot(formula_res)
dotplot(formula_res, x=~group) + ggplot2::facet_grid(~othergroup)
dotplot(formula_res)
mydf$othergroup <- "FC<=2"
mydf <- data.frame(Entrez=names(geneList), FC=geneList)
mydf <- mydf[abs(mydf$FC) > 1,]
mydf$group <- "upregulated"
mydf$group[mydf$FC < 0] <- "downregulated"
mydf$othergroup <- "FC<=2"
mydf$othergroup[abs(mydf$FC) > 2] <- "FC>2"
formula_res <- compareCluster(Entrez~group+othergroup, data=mydf, fun="enrichKEGG")
head(as.data.frame(formula_res))
dotplot(formula_res)
formula_res <- compareCluster(Entrez~group, data=mydf, fun="enrichKEGG")
head(as.data.frame(formula_res))
dotplot(formula_res)
dotplot(formula_res, x=~group)
#比较基因集的生物学功能，比如比较上下调基因
geneset <- list(entr_up,entr_down)
names(geneset) <- c('Up','Down')#一定要给list命名，不然后面会报错
compare <- compareCluster(geneClusters = geneset,fun = 'enrichKEGG')
dotplot(compare)
mydf <- data.frame(Entrez=names(geneList), FC=geneList)
mydf <- mydf[abs(mydf$FC) > 2,]
mydf$group <- "upregulated"
mydf$group[mydf$FC < 0] <- "downregulated"
formula_res <- compareCluster(Entrez~group, data=mydf, fun="enrichKEGG")
head(as.data.frame(formula_res))
dotplot(formula_res)
background_DEG <- read.csv('DEG.csv')
background_all <- read.csv('all.csv')
attach(background_DEG)
head(background_DEG)
colnames(background_DEG)
colnames(background_all)
str(background_DEG)
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F)
background_all <- read.csv('all.csv',stringsAsFactors = F)
colnames(background_all)
source('H:/Github/BGI/BGI.R', echo=TRUE)
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F)
background_all <- read.csv('all.csv',stringsAsFactors = F)
colnames(background_all)
colnames(background_DEG)
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F,encoding = 'UTF-8')
colnames(background_DEG)
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F,encoding = 'Latin-1')
colnames(background_DEG)
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F,check.names = T)
background_all <- read.csv('all.csv',stringsAsFactors = F,check.names = T)
colnames(background_all)
colnames(background_DEG)
background_all[1:9,1:9]
background_DEG <- read.csv('DEG.csv',stringsAsFactors = F,check.names = T)
background_all <- read.csv('all.csv',stringsAsFactors = F,check.names = T)
colnames(ba)
colnames(background_all)
colnames(background_DEG)
attach(background_DEG)
upgenes <- background_DEG[FK.FPKM>=1&HN.FPKM>=1&log2.HN.FK.>=2&Qvalue.FK.vs.HN.<0.01,]
downgenes <- background_DEG[FK.FPKM>=1&HN.FPKM>=1&log2.HN.FK.<=-2&Qvalue.FK.vs.HN.<0.01,]
detach(background_DEG)
save(background_DEG,upgenes,downgenes,background_all,file = 'Data.Rdata')
Sys.Date()
Sys.time()
date()
terrain.colors()
ts()
tsSmooth()
Sys.time()
rm(ls=list())
Sys.setlocale("LC_ALL","Chinese")
rm(list=ls())
rm(ls=list())

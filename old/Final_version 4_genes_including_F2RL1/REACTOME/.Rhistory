class(REACTOME$intersections)
REACTOME$intersections <- as.character(REACTOME$intersections)
rownames(data) <- unique(DEG)
head(data)
REACTOME$intersections
colnames(REACTOME)
REACTOME$term_name[1,'term_name']
#提取每一个通路里面的基因
gene_1 <- REACTOME$term_name[1]
REACTOME$term_name[1]
#提取每一个通路里面的基因
gene_1 <- REACTOME[1,' term_name']
REACTOME[1,' term_name']
#提取每一个通路里面的基因
gene_1 <- REACTOME[1,'term_name']
REACTOME[1,'term_name']
class()
class(REACTOME[1,'term_name'])
#创建矩阵，行列分别对应基因和通路
data <- matrix('0',36,20)
#创建矩阵，行列分别对应基因和通路
data <- matrix('tmp',36,20)
data <- as.data.frame(data)
View(data)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
head(data)
REACTOME[1,'term_name']
as.character(REACTOME[1,'term_name'])
paste0('gene_',as.character(REACTOME[1,'term_name']))
#提取每一个通路里面的基因
paste0('gene_in_',as.character(REACTOME[1,'term_name']))
#提取每一个通路里面的基因
tmp <- unlist(strsplit(REACTOME$intersections[1],split = ','))
tmp
#提取每一个通路里面的基因
tmp_gene <- unlist(strsplit(REACTOME$intersections[1],split = ','))
tmp_pathway <- as.character(REACTOME$term_name[1])
paste0('gene_in_',as.character(REACTOME$term_name[1]))
data[1,1]
colnames(data)
colnames(data)[1]
rownames(data)[1]
which(colnames(data)[1] %in% REACTOME$term_name)
REACTOME$term_name
index <- which(colnames(data)[1] %in% REACTOME$term_name)
REACTOME$intersections[1]
unlist(REACTOME$intersections[1])
unlist(strsplit(REACTOME$intersections))
unlist(strsplit(REACTOME$intersections)[1])
unlist(strsplit(REACTOME$intersections,split = ',')[1])
REACTOME$intersections[1]
unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3]
colnames(data)[3]
rownames(data)[2]
index <- which(colnames(data)[3] %in% REACTOME$term_name)
colnames(data)[3]
REACTOME$term_nam
REACTOME$term_name
index <- which(colnames(data)[3] %in% REACTOME$term_name)
index
index <- which(colnames(data)[3] %in% as.character(REACTOME$term_name))
as.character(REACTOME$term_name)
index <- which(as.character(REACTOME$term_name) == colnames(data)[3] )
unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3]
colnames(data)[3]
rownames(data)[2]
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3] <-
rownames(data)[2] %in% tmp_gene
rownames(data)[2]
class(rownames(data)[2])
tmp_gene
str(tmp_gene)
rownames(data)[2] %in% tmp_gene
data[2,3] <- rownames(data)[2] %in% tmp_gene
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
as.character(rownames(data)[2] %in% tmp_gene)
#提取每一个通路里面的基因
data[2,3]
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data <- as.data.frame(data)
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
head(data)
#提取每一个通路里面的基因
data[2,3]
colnames(data)[3]
rownames(data)[2]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
j=j+1
}
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
#新创建的矩阵，其行列分别为基因和通路名称，去原始矩阵里面检索该通路里面是否有该基因
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,j]
index <- which(as.character(REACTOME$term_name) == colnames(data)[j])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,j] <- ifelse(rownames(data)[i] %in% tmp_gene,1,0)
i=i+1
}
j=j+1
}
View(data)
#可视化
library(pheatmap)
library(RColorBrewer)
map <-pheatmap(data,col = c("red","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
str(data)
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data <- as.data.frame(data)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
str(data)
#新创建的矩阵，其行列分别为基因和通路名称，去原始矩阵里面检索该通路里面是否有该基因
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,j]
index <- which(as.character(REACTOME$term_name) == colnames(data)[j])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,j] <- ifelse(rownames(data)[i] %in% tmp_gene,1,0)
i=i+1
}
j=j+1
}
str(data)
#可视化
library(pheatmap)
library(RColorBrewer)
map <-pheatmap(data,col = c("red","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black"
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black"
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black",
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color="blue",
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'black',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
data <- t(data)
#可视化
library(pheatmap)
library(RColorBrewer)
pdf("heatmap.pdf",width = 20,height = 5,onefile = T)
par(mar=c(5.1, 4.1, 4.1, 2.1))
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
dev.off()
dev.off()
dev.off()
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,legend = F
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping Genes to Pathways')
length(unique(DEG))
nrow(REACTOME)
class(REACTOME$intersections)
REACTOME$intersections <- as.character(REACTOME$intersections)
#把所有的基因集合到一起，看看有多少个
DEG <- c()
i=1
for (i in 1:20) {
tmp <- unlist(strsplit(REACTOME$intersections[i],split = ','))
DEG <- c(DEG,tmp)
i=i+1
}
DEG
length(unique(DEG))#基因的数目
nrow(REACTOME)#通路的数目
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data <- as.data.frame(data)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
head(data)
#新创建的矩阵，其行列分别为基因和通路名称，去原始矩阵里面检索该通路里面是否有该基因
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,j]
index <- which(as.character(REACTOME$term_name) == colnames(data)[j])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,j] <- ifelse(rownames(data)[i] %in% tmp_gene,1,0)
i=i+1
}
j=j+1
}
View(data)
data <- t(data)
#可视化
library(pheatmap)
library(RColorBrewer)
pdf("heatmap.pdf",width = 20,height = 5,onefile = T)
par(mar=c(5.1, 4.1, 4.1, 2.1))
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping Genes to Pathways')
dev.off()
dev.off()
pdf("heatmap.pdf",width = 10,height = 5,onefile = T)
par(mar=c(5.1, 4.1, 4.1, 2.1))
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping Genes to Pathways')
dev.off()
library(RColorBrewer)
pdf("heatmap.pdf",width = 10,height = 5,onefile = T)
par(mar=c(5.1, 4.1, 4.1, 2.1))
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping Genes to Pathways (Reactome)')
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf')
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
library(Cairo)
library(ggplot2)
REACTOME <- read.csv('reactome_file.csv')
REACTOME <- REACTOME[1:20,]
REACTOME$rich_factor <- as.numeric(REACTOME$intersection_size/REACTOME$term_size)
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf')
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
dev.off()
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf')
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 10,height = 10)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 7,height = 5)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 7,height = 3)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 14,height = 5)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 10,height = 5)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#png_path="./bubble_plot.png"
#CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
pdf(file = 'bubble_plot.pdf',width = 10,height = 5)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment (Reactome)")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#画基因-通路方格图（就是显示每条通路里面富集了哪些基因）
#这里的interactions是通路里面的基因，term_name是通路。
#把通路里面的基因转化为character类型
class(REACTOME$intersections)

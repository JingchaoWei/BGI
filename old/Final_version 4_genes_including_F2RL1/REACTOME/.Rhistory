geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="green",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Fold enrichment", y="Pathway name", title="Pathway enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
#柱状图：
rm(list=ls())
library(ggplot2)
library(Cairo)
REACTOME <- read.csv('reactome_file.csv')
REACTOME <- REACTOME[1:20,]
colnames(REACTOME)
png_path="./REACTOME.png"
CairoPNG(png_path, width = 18, height = 12, units='in', dpi=600)
ggplot(data=REACTOME) + geom_bar(aes(x=reorder(term_name,intersection_size),y=intersection_size, fill=-log10(adjusted_p_value)),
stat='identity') +
coord_flip() + scale_fill_gradient(expression(-log["10"](adjusted_p_value)),low="blue", high = "red") +
xlab("") + ylab("Gene count") + scale_y_continuous(expand=c(0, 0)) +
theme(axis.text.x=element_text(color="black",size=rel(1.5)),
axis.text.y=element_text(color="black", size=rel(1.6)),
axis.title.x = element_text(color="black", size=rel(1.6)),
legend.text=element_text(color="black",size=rel(1.0)),
legend.title = element_text(color="black",size=rel(1.1)))
# legend.position=c(0,1),legend.justification=c(-1,0) # legend.position="top", )
dev.off()
#气泡图：
rm(list=ls())
library(Cairo)
library(ggplot2)
REACTOME <- read.csv('reactome_file.csv')
REACTOME <- REACTOME[1:20,]
REACTOME$rich_factor <- as.numeric(REACTOME$intersection_size/REACTOME$term_size)
png_path="./bubble_plot.png"
CairoPNG(png_path, width = 12, height = 12, units='in', dpi=600)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Fold enrichment", y="Pathway name", title="Pathway enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
png_path="./bubble_plot.png"
CairoPNG(png_path, width = 8, height = 6, units='in', dpi=600)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Fold enrichment", y="Pathway name", title="Pathway enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
library(Cairo)
library(ggplot2)
REACTOME <- read.csv('reactome_file.csv')
REACTOME <- REACTOME[1:20,]
REACTOME$rich_factor <- as.numeric(REACTOME$intersection_size/REACTOME$term_size)
png_path="./bubble_plot.png"
CairoPNG(png_path, width = 10, height = 6, units='in', dpi=600)
ggplot(REACTOME,aes(x=rich_factor,y=term_name))+
geom_point(aes(size=intersection_size,color=-1*log10(adjusted_p_value)))+
scale_colour_gradient(low="blue",high="red")+
labs(color=expression(-log[10](P.value)), size="Gene number",
x="Rich Ratio", y="Pathway name", title="Term enrichment")+
theme_bw()+
theme( axis.text.y = element_text(size = rel(1.3)),
axis.title.x = element_text(size=rel(1.3)), axis.title.y = element_blank())
dev.off()
install.packages('drawAHeatMap')
genes <- REACTOME$intersections
genes <- as.data.frame(REACTOME$intersections)
genes$genes <- as.data.frame(REACTOME$intersections)
View(genes)
genes <- as.data.frame(REACTOME$intersections)
View(genes)
colnames(genes) <- 'gene'
genes$gene <- as.character(genes$gene)
genes$gene
strsplit("PIK3R1,PIK3CB,HIF1A,CCL20,CCL19,CCL5,CCL2,ICAM1,VCAM1,MAPK3,HGF",split = ',')
class(REACTOME$intersections)
REACTOME$intersections <- as.character(REACTOME$intersections)
rownames(REACTOME)
data <- as.data.frame()
data <- data.frame()
REACTOME$
REACTOME$
REACTOME$term_name
str(REACTOME$intersections)
REACTOME$intersections
REACTOME$intersections[1]
data$'G alpha (i) signalling events' <- strsplit(REACTOME$intersections[1])
data$'G alpha (i) signalling events' <- strsplit(REACTOME$intersections[1],split = ',')
data.frame(x = 1, y = 1:10, fac = fac)
data.frame(x = 1, y = 1:10)
strsplit(REACTOME$intersections[1],split = ',')
data[,1] <- strsplit(REACTOME$intersections[1],split = ',')
letters[1:5]
data <- as.data.frame(setNames(replicate(5,numeric(0), simplify = F), REACTOME$term_name))
replicate(20,numeric(0), simplify = F)
data <- as.data.frame(setNames(replicate(20,numeric(0), simplify = F), REACTOME$term_name))
View(data)
empty_df = df[FALSE,]
df = data.frame(matrix(vector(), 0, 3,
dimnames=list(c(), c("Date", "File", "User"))),
stringsAsFactors=F)
View(df)
df = data.frame(matrix(vector(), 20, 39,
dimnames=list(c(), c("Date", "File", "User"))),
stringsAsFactors=F)
colClasses = as.character(REACTOME$term_name)
rm(data)
ncol(REACTOME)
nrow(REACTOME)
DEG <- as.character(REACTOME$intersections)
deg
DEG
unique(DEG)
str(DEG)
levels(DEG)
nrow(REACTOME)
DEG <- vector()
strsplit(REACTOME$intersections[1],split = ',')
strsplit(REACTOME$intersections[1],split = ',')
class(strsplit(REACTOME$intersections[1],split = ','))
class(strsplit(REACTOME$intersections[[1]],split = ','))
unlist(strsplit(REACTOME$intersections[1],split = ','))
class(unlist(strsplit(REACTOME$intersections[1],split = ',')))
i=1
DEG <- vector()
i=1
for (i in 1:20) {
tmp <- unlist(strsplit(REACTOME$intersections[i],split = ','))
DEG <- c(DEG,tmp)
i=i+1
}
DEG <- vector()
str(DEG)
DEG <- as.vector()
DEG <- vector()
DEG <- c()
i=1
i=1
for (i in 1:20) {
tmp <- unlist(strsplit(REACTOME$intersections[i],split = ','))
DEG <- c(DEG,tmp)
i=i+1
}
ncol(REACTOME)
DEG <- c()
tmp <- unlist(strsplit(REACTOME$intersections[1],split = ','))
tmp
DEG <- c(DEG,tmp)
DEG <- c()
i=1
for (i in 1:20) {
tmp <- unlist(strsplit(REACTOME$intersections[i],split = ','))
DEG <- c(DEG,tmp)
i=i+1
}
DEG
unique(DEG)
length(unique(DEG))
ncol(REACTOME)
nrow(REACTOME)
cell_count <- length(unique(DEG))*nrow(REACTOME)
matrix <- matrix(0,36,20)
View(matrix)
matrix <- data.frame(0,36,20)
View(matrix)
data <- matrix(0,36,20)
data <- as.data.frame(data)
View(data)
colnames(REACTOME$source)
colnames(data) <- REACTOME$source
colnames(data) <- REACTOME$term_id
rownames(data) <- unique(DEG)
DEG
str(rownamesdata)
str(rownames(data))
rownames(data)[1]
colnames(data)[1]
colnames(data) <- REACTOME$term_name
class(REACTOME$intersections)
REACTOME$intersections <- as.character(REACTOME$intersections)
rownames(data) <- unique(DEG)
head(data)
REACTOME$intersections
colnames(REACTOME)
REACTOME$term_name[1,'term_name']
#提取每一个通路里面的基因
gene_1 <- REACTOME$term_name[1]
REACTOME$term_name[1]
#提取每一个通路里面的基因
gene_1 <- REACTOME[1,' term_name']
REACTOME[1,' term_name']
#提取每一个通路里面的基因
gene_1 <- REACTOME[1,'term_name']
REACTOME[1,'term_name']
class()
class(REACTOME[1,'term_name'])
#创建矩阵，行列分别对应基因和通路
data <- matrix('0',36,20)
#创建矩阵，行列分别对应基因和通路
data <- matrix('tmp',36,20)
data <- as.data.frame(data)
View(data)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
head(data)
REACTOME[1,'term_name']
as.character(REACTOME[1,'term_name'])
paste0('gene_',as.character(REACTOME[1,'term_name']))
#提取每一个通路里面的基因
paste0('gene_in_',as.character(REACTOME[1,'term_name']))
#提取每一个通路里面的基因
tmp <- unlist(strsplit(REACTOME$intersections[1],split = ','))
tmp
#提取每一个通路里面的基因
tmp_gene <- unlist(strsplit(REACTOME$intersections[1],split = ','))
tmp_pathway <- as.character(REACTOME$term_name[1])
paste0('gene_in_',as.character(REACTOME$term_name[1]))
data[1,1]
colnames(data)
colnames(data)[1]
rownames(data)[1]
which(colnames(data)[1] %in% REACTOME$term_name)
REACTOME$term_name
index <- which(colnames(data)[1] %in% REACTOME$term_name)
REACTOME$intersections[1]
unlist(REACTOME$intersections[1])
unlist(strsplit(REACTOME$intersections))
unlist(strsplit(REACTOME$intersections)[1])
unlist(strsplit(REACTOME$intersections,split = ',')[1])
REACTOME$intersections[1]
unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3]
colnames(data)[3]
rownames(data)[2]
index <- which(colnames(data)[3] %in% REACTOME$term_name)
colnames(data)[3]
REACTOME$term_nam
REACTOME$term_name
index <- which(colnames(data)[3] %in% REACTOME$term_name)
index
index <- which(colnames(data)[3] %in% as.character(REACTOME$term_name))
as.character(REACTOME$term_name)
index <- which(as.character(REACTOME$term_name) == colnames(data)[3] )
unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3]
colnames(data)[3]
rownames(data)[2]
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3] <-
rownames(data)[2] %in% tmp_gene
rownames(data)[2]
class(rownames(data)[2])
tmp_gene
str(tmp_gene)
rownames(data)[2] %in% tmp_gene
data[2,3] <- rownames(data)[2] %in% tmp_gene
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
as.character(rownames(data)[2] %in% tmp_gene)
#提取每一个通路里面的基因
data[2,3]
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data <- as.data.frame(data)
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
head(data)
#提取每一个通路里面的基因
data[2,3]
colnames(data)[3]
rownames(data)[2]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[2,3] <- as.character(rownames(data)[2] %in% tmp_gene)
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
j=j+1
}
i=1
for (i in 1:36) {
data[i,3]
colnames(data)[3]
rownames(data)[i]
index <- which(as.character(REACTOME$term_name) == colnames(data)[3])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,3] <- as.character(rownames(data)[i] %in% tmp_gene)
i=i+1
}
#新创建的矩阵，其行列分别为基因和通路名称，去原始矩阵里面检索该通路里面是否有该基因
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,j]
index <- which(as.character(REACTOME$term_name) == colnames(data)[j])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,j] <- ifelse(rownames(data)[i] %in% tmp_gene,1,0)
i=i+1
}
j=j+1
}
View(data)
#可视化
library(pheatmap)
library(RColorBrewer)
map <-pheatmap(data,col = c("red","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
str(data)
#创建矩阵，行列分别对应基因和通路
data <- matrix(0,36,20)
data <- as.data.frame(data)
colnames(data) <- REACTOME$term_name
rownames(data) <- unique(DEG)
str(data)
#新创建的矩阵，其行列分别为基因和通路名称，去原始矩阵里面检索该通路里面是否有该基因
j=1
for (j in 1:20) {
i=1
for (i in 1:36) {
data[i,j]
index <- which(as.character(REACTOME$term_name) == colnames(data)[j])
tmp_gene <- unlist(strsplit(REACTOME$intersections,split = ',')[index])
data[i,j] <- ifelse(rownames(data)[i] %in% tmp_gene,1,0)
i=i+1
}
j=j+1
}
str(data)
#可视化
library(pheatmap)
library(RColorBrewer)
map <-pheatmap(data,col = c("red","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black"
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black"
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color = "black",
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2, border_color="blue",
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'black',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
data <- t(data)
#可视化
library(pheatmap)
library(RColorBrewer)
pdf("heatmap.pdf",width = 20,height = 5,onefile = T)
par(mar=c(5.1, 4.1, 4.1, 2.1))
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
dev.off()
dev.off()
dev.off()
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 2,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Heatmap')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,legend = F
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("#FF9999","white"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping to Pathways')
map <-pheatmap(data,col = c("white","#FF9999"),
cluster_rows = F,cluster_cols=F,legend = F,
border_color = 'grey',
show_colnames=T,show_rownames=T,
fontsize_col = 8,
fontsize_row = 8,fontsize = 8,
main = 'Mapping Genes to Pathways')
length(unique(DEG))
nrow(REACTOME)
